[8_Interrupt Control_2]
//
#define RCC_APB2ENR (*(volatile unsigned *)0x40021018)

#define GPIOA_CRL   (*(volatile unsigned *)0x40010800)
#define GPIOA_CRH   (*(volatile unsigned *)0x40010804)
#define GPIOA_IDR   (*(volatile unsigned *)0x40010808)
#define GPIOA_BSRR   (*(volatile unsigned *)0x40010810)
#define GPIOA_BRR   (*(volatile unsigned *)0x40010814)

#define GPIOB_CRL   (*(volatile unsigned *)0x40010C00)
#define GPIOB_BSRR   (*(volatile unsigned *)0x40010C10)
#define GPIOB_BRR   (*(volatile unsigned *)0x40010C14)

#define GPIOC_CRL   (*(volatile unsigned *)0x40011000)
#define GPIOC_BSRR   (*(volatile unsigned *)0x40011010)
#define GPIOC_BRR   (*(volatile unsigned *)0x40011014)

#define USART_SR (*(volatile unsigned *)0x40013800)
#define USART_DR (*(volatile unsigned *)0x40013804)
#define USART_BRR (*(volatile unsigned *)0x40013808)
#define USART_CR1 (*(volatile unsigned *)0x4001380C)
#define USART_CR2 (*(volatile unsigned *)0x40013810)
#define USART_CR3 (*(volatile unsigned *)0x40013814)
#define USART_GTPR (*(volatile unsigned *)0x40013818)

#define HSI_CLK (8000000L)

#define BAUD_RATE (9600L)
#define USARTDIV_I (HSI_CLK/(16L*BAUD_RATE))
#define USARTDIV_F (HSI_CLK/(16.0*BAUD_RATE))
#define BRR_MANTISSA (USARTDIV_I<<4)
#define BRR_FRACTION ((unsigned int)((USARTDIV_F - USARTDIV_I)*16))
#define BRR_VAL (BRR_MANTISSA|BRR_FRACTION)

#define SCS_BASE (0xE000E000)
#define SYSTICK_BASE (SCS_BASE+0x0010)
#define NVIC_BASE (SCS_BASE+0x0010)
#define SCB_BASE (SCS_BASE+0x0D00)

#define SCB_VTOR (*(volatile unsigned *)(SCB_BASE+0x08))
#define SCB_SHPR3 (*(volatile unsigned *)(SCB_BASE+0x20))

#define SYSTICK_CTRL (*(volatile unsigned *)(SYSTICK_BASE+0x00))
#define SYSTICK_LOAD (*(volatile unsigned *)(SYSTICK_BASE+0x04))
#define SYSTICK_VAL (*(volatile unsigned *)(SYSTICK_BASE+0x08))
#define SYSTICK_CALIB (*(volatile unsigned *)(SYSTICK_BASE+0x0C))

#define SYS_CLOCK HSI_CLK

#define NVIC_VECTBL_FLASH (0x08000000)
//

#include <stdio.h>
#include "config.h"

volatile unsigned int SysTick;

void delay(int cnt)
{
	for(;cnt!=0;cnt--);
}

void SysTick_Handler(void)
{
	SysTick--;
}

void delay_ms(volatile unsigned int ms)
{
	SysTick = ms;
	while(SysTick != 0);
}

unsigned char GetChar(void){
  unsigned char data;
  while(!(USART_SR & (1<<5)));
  data = USART_DR;
  return data;
}

void PutChar(unsigned char c)
{
   while((USART_SR & (1<<7))==0);
   USART_DR=c;
}

void Puts(unsigned char *str)
{
  while(*str){
    PutChar(*str);
    str++;
  }
}
void Gets(unsigned char *buff)
{
  unsigned char data;
  while(1){
    data = GetChar();
    if(data == '\r' || data == '\n') break;
    *buff = data;
    buff++;
  }
  *buff = '\0';
}
  
void Quest(void)
{
	Puts("Choose the time delay in millisecond.\n");
	Puts("\n\r 1. 1000 ms");
	Puts("\n\r 2. 1500 ms");
	Puts("\n\r 3. 3000 ms");
	Puts("\n\r 4. 5000 ms");
	Puts("\n\r input number(1~4) : ");
}

int main(void)
{
  unsigned char byte;
  unsigned int ticks;
  
  RCC_APB2ENR |= (1<<14) | (1<<2) | (1<<0);
  GPIOA_CRH = 0x000004B0;
  GPIOA_CRL = 0x33333333;

  USART_CR1 = 0x0C;
  USART_CR2 &=~(3<<12);
  USART_CR2 |=(0<<12);
  USART_CR3 &=~(3<<8);
  USART_CR3 |= (0<<8);
  
  USART_BRR = BRR_VAL;
  USART_CR1 |=(1<<13);


  SCB_VTOR=NVIC_VECTBL_FLASH | (0x3000);

  ticks=SYS_CLOCK/1000;
  SYSTICK_LOAD=ticks-1;
  SCB_SHPR3=0xF0000000;

  SYSTICK_VAL=0x00;
  SYSTICK_CTRL = (1<<2) | (1<<1) | (1<<0);
    
  while(1){
   Quest();
   byte=GetChar()-48;
   
   switch(byte)
   {
     case 1:
        GPIOA_BSRR = 0xFF;
        delay_ms(1000);
        GPIOA_BRR  = 0xFF;
        break;
     case 2:
        GPIOA_BSRR = 0xFF;
        delay_ms(1500);
        GPIOA_BRR  = 0xFF;
        break;    
     case 3:
        GPIOA_BSRR = 0xFF;
        delay_ms(3000);
        GPIOA_BRR  = 0xFF;
        break;
     case 4:
        GPIOA_BSRR = 0xFF;
        delay_ms(5000);
        GPIOA_BRR  = 0xFF;
        break;
     default:
        Puts("You choose an wrong number!");
        break;
   }
 }  
}